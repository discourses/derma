name: Derma Project

on: [push]

jobs:
  build:
    name: Testing Derma Project Programs
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          printf "\n"
          echo "============================= flake8 session starts =============================="

          # stop the build if there are Python syntax errors or undefined names
          printf "\n"
          echo "Issues in relation to logic (F7), syntax (Python E9, Flake F7), mathematical
          formulae symbols (F63), undefined variable names (F82):"
          echo "src/data"
          flake8 --count --select E9,F63,F7,F82 --show-source --statistics src/data

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          printf "\n"
          echo "Complexity issues:"
          echo "src/data"
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics src/data

      - name: Lint with pylint
        run: |
          pip install pylint
          printf "\n"
          echo "============================= pylint session starts =============================="
          printf "\n"
          # pylint --rcfile .pylintrc src/data
      - name: Test with pytest
        run: |
          pip install pytest
          pytest -o python_files=test_*.py
      - name: Coverage with pytest-cov
        run: |
          pip install coverage
          pip install pytest-cov
          pytest --cov src/data tests/data

  importing-pkg:
    name: Buiding for Docker Hub
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Build the Docker image
        run: docker build . -f importing/Dockerfile --tag greyhypotheses/derma:importing

      - name: Push the image to Docker Hub
        run: |
          docker login -u "${DOCKER_HUB_USERNAME}" -p "${DOCKER_HUB_ENTRY}"
          docker push greyhypotheses/derma:importing
        env:
          DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
          DOCKER_HUB_ENTRY: ${{secrets.DOCKER_HUB_ENTRY}}

  importing-pkg-backup:
    name: Building for GitHub Docker Packages
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Build the Docker image
        run: docker build . -f importing/Dockerfile --tag docker.pkg.github.com/greyhypotheses/derma/derma:importing

      - name: Push the image to GitHub Packages
        run: |
          docker login -u "${GITHUB_PACKAGES_USERNAME}" -p "${GITHUB_PACKAGES_ENTRY}" docker.pkg.github.com
          docker push docker.pkg.github.com/greyhypotheses/derma/derma:importing
        env:
          GITHUB_PACKAGES_USERNAME: ${{secrets.GITHUB_PACKAGES_USERNAME}}
          GITHUB_PACKAGES_ENTRY: ${{secrets.GITHUB_PACKAGES_ENTRY}}

  extraction-model:
    name: Buiding for Docker Hub
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Build the Docker image
        run: docker build . -f src/modelling/extraction/Dockerfile --tag greyhypotheses/derma:FeatureExtractionDL

      - name: Push the image to Docker Hub
        run: |
          docker login -u "${DOCKER_HUB_USERNAME}" -p "${DOCKER_HUB_ENTRY}"
          docker push greyhypotheses/derma:FeatureExtractionDL
        env:
          DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
          DOCKER_HUB_ENTRY: ${{secrets.DOCKER_HUB_ENTRY}}